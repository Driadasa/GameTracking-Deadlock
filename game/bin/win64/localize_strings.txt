  %s (path ID '%s')\n
  %s bytes for token lookup; %s bytes for instance info\n
  %s tokens; %s instances 
  from file '%s'\n
  has gender\n
  in hash as '%s'\n
  language '%s'\n
  no language associated\n
  not from a file\n
  string data: %s bytes (%s bytes of padding) in %s blocks\n
  total memory allocated: %s bytes\n
  valid for gender lookup\n
  valid for plural lookup\n
  value '%s'\n
!"enum ELanguage order mismatched from Language_t s_LanguageNames, fix it!"
!m_lang.m_symLanguage.IsValid()
!pArgList[i] || pArgList[i] < pOut->String() || pArgList[i] >= ( pOut->String() + pOut->LengthAllocated() )
!pLocStr->IsVariantSubString()
"lang"\r\n{\r\n"Language" "English"\r\n"Tokens"\r\n{\r\n
#GameUI_Language_Brazilian
#GameUI_Language_Bulgarian
#GameUI_Language_Czech
#GameUI_Language_Danish
#GameUI_Language_Dutch
#GameUI_Language_English
#GameUI_Language_Finnish
#GameUI_Language_French
#GameUI_Language_German
#GameUI_Language_Greek
#GameUI_Language_Hungarian
#GameUI_Language_Indonesian
#GameUI_Language_Italian
#GameUI_Language_Japanese
#GameUI_Language_Korean
#GameUI_Language_Latam_Spanish
#GameUI_Language_Norwegian
#GameUI_Language_Polish
#GameUI_Language_Portuguese
#GameUI_Language_Romanian
#GameUI_Language_Russian
#GameUI_Language_Simplified_Chinese
#GameUI_Language_Spanish
#GameUI_Language_Swedish
#GameUI_Language_Thai
#GameUI_Language_Traditional_Chinese
#GameUI_Language_Turkish
#GameUI_Language_Ukrainian
#GameUI_Language_Vietnamese
#LOC_Date_AM
#LOC_Date_Day%d
#LOC_Date_DayNumFormat
#LOC_Date_DayShort%d
#LOC_Date_Format_DayOfWeek
#LOC_Date_Format_DayOfWeekShort_MonthShort_Day_Hour_Minute_Second_12
#LOC_Date_Format_DayOfWeekShort_MonthShort_Day_Hour_Minute_Second_24
#LOC_Date_Format_DayOfWeek_Day_Month_Hour_Minute_12
#LOC_Date_Format_DayOfWeek_Day_Month_Hour_Minute_24
#LOC_Date_Format_DayOfWeek_Month_Day_Year
#LOC_Date_Format_DayOfWeek_Month_Day_Year_Hour_Minute_Second_12
#LOC_Date_Format_DayOfWeek_Month_Day_Year_Hour_Minute_Second_24
#LOC_Date_Format_Day_Month
#LOC_Date_Format_Day_Month_Numeric
#LOC_Date_Format_Day_Month_Year
#LOC_Date_Format_Day_Month_Year_Hour_Minute_12
#LOC_Date_Format_Day_Month_Year_Hour_Minute_24
#LOC_Date_Format_Day_Month_Year_Hour_Minute_Second_12
#LOC_Date_Format_Day_Month_Year_Hour_Minute_Second_24
#LOC_Date_Format_Day_Month_Year_Numeric
#LOC_Date_Format_Econ_MonthShort_Day_Year_Hour_Minute_Second
#LOC_Date_Format_Econ_MonthShort_Day_Year_Hour_Minute_Second_GMT
#LOC_Date_Format_Hour_Minute_12
#LOC_Date_Format_Hour_Minute_24
#LOC_Date_Format_Hour_Minute_Second_12
#LOC_Date_Format_Hour_Minute_Second_24
#LOC_Date_Format_Month_Day_Year
#LOC_Date_HourNumFormat
#LOC_Date_Month%d
#LOC_Date_MonthNumFormat
#LOC_Date_MonthShort%d
#LOC_Date_PM
#LOC_Date_YearNumFormat
#LOC_Duration_Day
#LOC_Duration_Days
#LOC_Duration_Hour
#LOC_Duration_Hours
#LOC_Duration_Minute
#LOC_Duration_Minutes
#LOC_Duration_Second
#LOC_Duration_Seconds
#LOC_Duration_d_h_m
#LOC_Duration_d_h_m_s
#LOC_Duration_dhhmmss
#LOC_Duration_h_m
#LOC_Duration_h_m_s
#LOC_Duration_hhmmss
#LOC_Duration_m
#LOC_Duration_m_s
#LOC_Duration_mmss
#LOC_Duration_s
#Valve_SelectLanguage_Brazilian
#Valve_SelectLanguage_Bulgarian
#Valve_SelectLanguage_Czech
#Valve_SelectLanguage_Danish
#Valve_SelectLanguage_Dutch
#Valve_SelectLanguage_English
#Valve_SelectLanguage_Finnish
#Valve_SelectLanguage_French
#Valve_SelectLanguage_German
#Valve_SelectLanguage_Greek
#Valve_SelectLanguage_Hungarian
#Valve_SelectLanguage_Indonesian
#Valve_SelectLanguage_Italian
#Valve_SelectLanguage_Japanese
#Valve_SelectLanguage_Korean
#Valve_SelectLanguage_Latam_Spanish
#Valve_SelectLanguage_Norwegian
#Valve_SelectLanguage_Polish
#Valve_SelectLanguage_Portuguese
#Valve_SelectLanguage_Romanian
#Valve_SelectLanguage_Russian
#Valve_SelectLanguage_Simplified_Chinese
#Valve_SelectLanguage_Spanish
#Valve_SelectLanguage_Swedish
#Valve_SelectLanguage_Thai
#Valve_SelectLanguage_Traditional_Chinese
#Valve_SelectLanguage_Turkish
#Valve_SelectLanguage_Ukrainian
#Valve_SelectLanguage_Vietnamese
%04d
%language%
%s failed to localize: %s\n
%s(%u): Localization key '%s' has a conditional that is too long. Truncating.\n
%s(%u): Localization key '%s' has a value that is too long. Truncating.\n
%s(%u): Localization key '%s' is too long. Truncating.\n
%s(%u): Localization token names and values must be quote-delimited\n
%s(%u): Quoted localization token missing a close quote\n
%s(%u): Unquoted localization token ends with a ", possible missing open quote?\n
%s: invalid compat-with index %d\n
%s: invalid index %d\n
%s: invalid instance index %d\n
%s: invalid token index %d\n
%s: no gender table for language %d\n
%s: no plural rule for language %d\n
%s_pw
( eLang + 1 ) < V_ARRAYSIZE(s_LanguageNames)
( eLang + 1 ) >= 0
( nFlags & LOC_GET_VARIANT_FORCE_ALL_LANGUAGES ) != 0
(%s from %u files; %s not file-based)\n
(int)eLang >= k_Lang_First && (int)eLang < k_Lang_MAX
*.txt
*pCtxEnd == '}'
*pOutGender == LOC_GENDER_NONE
-all_languages
-ccsyntax
-enablejongsung
.?AV?$CBaseAppSystem@VILocalize@@@@
.?AV?$CTier0AppSystem@VILocalize@@$0A@@@
.?AV?$CTier1AppSystem@VILocalize@@$0A@@@
.?AV?$CTier2AppSystem@VILocalize@@$0A@@@
.?AVCLocalize@@
.?AVILocalize@@
/resource/valve_
:help
:name_ref
:shorthelp
;\tV_powd
<floating-point value out of range>
<invalid currency %d>
<invalid date format %d>
<invalid duration format %d>
<invalid floating-point number format %d>
<invalid integral number format %d>
<invalid ordinal format %d>
<invalid precision %d>
<space>
ARS$
Brazilian
Bulgarian
C:\buildworker\citadel_rel_win64\build\_build_\localize\_vpc_localize\default\win64\_msvc_\Retail\localize.pdb
C:\buildworker\citadel_rel_win64\build\src\common\language.cpp
C:\buildworker\citadel_rel_win64\build\src\localize\localize_imp.cpp
CKV3MemberIteratorView<1>::iterator::iterator
CKV3MemberIteratorView<1>::iterator::operator *
CLP$
CLocalize::AddAllLanguageFiles
CLocalize::AddChange
CLocalize::AddLocalizationKeyValuesImpl
CLocalize::AddStringImpl
CLocalize::AddStringValueImpl
CLocalize::AddTokenHit
CLocalize::AddTokenMiss
CLocalize::AssertTokenNameFlagsForUsage
CLocalize::CLocalize
CLocalize::ComputeNumGenders
CLocalize::ComputeNumPluralVariants
CLocalize::ConstructDurationString
CLocalize::ConstructStringVArgs
CLocalize::EndChange
CLocalize::FindPluralCompatibleImpl
CLocalize::FindPluralImpl
CLocalize::FindSafe
CLocalize::GetCompatibilityVariant
CLocalize::GetFileNameByIndex
CLocalize::GetNameByIndex
CLocalize::GetNextInstanceIndex
CLocalize::GetNounCompatibleGender
CLocalize::GetNumVariantValuesByIndex
CLocalize::GetPluralCompatibilityVariant
CLocalize::GetPluralGenderValueByIndex
CLocalize::GetPluralVariantImpl
CLocalize::GetPrimaryInstanceByIndex
CLocalize::GetResolvedPluralCompatibleValueImpl
CLocalize::GetResolvedValueImpl
CLocalize::GetValueByIndex
CLocalize::GetValueByInstanceIndex
CLocalize::GetValueVariantByInstanceIndex
CLocalize::GetVariantValueByIndex
CLocalize::GetVariantValueByIndexImpl
CLocalize::InstallChangeCallback: Attempted to add the same callback twice!\n
CLocalize::LangProperties_t::Init
CLocalize::ParseTokenName
CLocalize::ParseVariantFlags
CLocalize::ReadLocalizationBufferImpl
CLocalize::ResolvePluralCompatibleImpl
CLocalize::ResolvePluralImpl
CLocalize::ResolveToken
CLocalize::SetCurrentLanguage
CLocalize::SetCurrentSubLanguage
CLocalize::SetCurrentSubLanguageFromSystem
CLocalize::SetValueByIndex
COL$
CUtlBlockMemory<char,int>::ChangeSize
CUtlBlockMemory<char,int>::EnsureContiguousCapacity
CUtlBlockMemory<char,int>::Init
CUtlBlockMemory<char,int>::operator []
CUtlMemory<struct CLocalize::ChangeCallback_t,int>::Grow
CUtlMemory<struct CLocalize::ChangeCallback_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CLocalize::FileChangeDir_t *,int>::Grow
CUtlMemory<struct CLocalize::FileChangeDir_t *,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CLocalize::LocalizationFileInfo_t,int>::Grow
CUtlMemory<struct CLocalize::LocalizationFileInfo_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CLocalize::LocalizationFileInfo_t,int>::Swap
CUtlMemory<struct CLocalize::LocalizedString_t,int>::Grow
CUtlMemory<struct CLocalize::LocalizedString_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CLocalize::LocalizedString_t,int>::Swap
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::HashBucket_t,int>::Grow
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::HashBucket_t,int>::Grow::<lambda_1>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::HashBucket_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::Node_t,int>::Grow
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::Node_t,int>::Grow::<lambda_1>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,class LocalizeStringID_t,struct StringEqualFunctor,struct StringHashFunctor,int>::Node_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::HashBucket_t,int>::Grow
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::HashBucket_t,int>::Grow::<lambda_1>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::HashBucket_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::HashBucket_t,int>::Swap
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::Node_t,int>::Grow
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::Node_t,int>::Grow::<lambda_1>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::Node_t,int>::Grow::<lambda_2>::operator ()
CUtlMemory<struct CUtlHashMap<char const *,struct CLocalize::LocTokenInfo_t,struct FastCaselessStringEqualFunctor,struct FastCaselessStringHashFunctor,class LocalizeStringIndex_t>::Node_t,int>::Swap
CUtlMemory<struct LocalizationFileInfoRaw_t,int>::Grow
CUtlMemory<struct LocalizationFileInfoRaw_t,int>::Grow::<lambda_2>::operator ()
Compatibility context: %s\n
ConstructString_Impl
Czech
Danish
Duplicate string token '%s' found in %s (original in %s)\n
DuplicateTokensAssert
DuplicateTokensFail
DuplicateTokensWarning
Dutch
ERROR: Duplicate string token '%s' found in %s (original in %s)\n
English
Failed to read localization file %s\n
Finnish
French
Full paths not allowed in localization file specification '%s'\n
German
GetCurrencyMoneyStringConfiguration
GetLanguageShortName
Hungarian
ILocalize::AddFile() failed to load file "%s".\n
Improper termination of variant flags in '%s'\n
Indonesian
Invalid noun context in '%s'\n
Invalid usage char in '%s'\n
Invalid usage context in '%s'\n
Invalid variant flag '%s' in '%s'\n
Invalid variant flag byte 0x%x\n
Italian
Japanese
Korean
LOCFAIL %s (all languages): %d of %d files failed\n
LOCFAIL %s: '%s' gives multiple variants for :n\n
LOCFAIL %s: '%s' has variants but does not have any token name variant flags (:g, :n, :p, etc.)\n
LOCFAIL %s: '%s' indicates %u %s but needs %u valid %s\n
LOCFAIL %s: '%s' indicates 1 plural but needs %u valid plural variants\n
LOCFAIL %s: '%s' indicates a gender specifier but doesn't provide one\n
LOCFAIL %s: '%s' indicates gender but doesn't have valid gender flags\n
LOCFAIL %s: '%s' indicates genders but doesn't have valid gender variants\n
LOCFAIL %s: Too many variant values for '%s'\n
LOCFAIL %s: Value for '%s' does not have required gender\n
LOCFAIL %s: Value for '%s' has gendered variants but the token doesn't have :g or :n\n
LOCFAIL %s: Value for '%s' has multiple variants with the same gender\n
LOCFAIL %s: Value for '%s' must have all language-defined gender variants\n
LOCFAIL %s: Value for '%s' must have the same gender for each variant\n
LOCFAIL %s: Value for '%s' uses a gender not valid for the value language\n
LOCFAIL: Ignoring unsupported encoding in localization file '%s'\n
LOCFAIL: Tried to add a loc token with '#' starting the token name ('%s')\n
LOCFAIL: Tried to add empty loc token\n
LOCFAIL: invalid localization file content in '%s'\n
LOCWARN %s: value of '%s' matches English, possible unlocalized token\n
LOC_Date_Today
LOC_Date_Tomorrow
LOC_Date_Yesterday
LOC_Number_DecimalPoint
LOC_Number_Grouping
LOC_Number_InfinityShort
LOC_Number_NegativeSign
LOC_Number_PositiveSign
LOC_Ordinal_Prefix_%u
LOC_Ordinal_Prefix_Default
LOC_Ordinal_Suffix_%u
LOC_Ordinal_Suffix_Default
Latam_Spanish
List all loaded localization files
List information on the given token
Loaded localization files:\n
Loc token '%s' not found\n
Loc token '%s': index %d\n
Localization System
Localization stats for %s data:\n
Localization string too long: %d chars in '%.20s...'\n
Localization watching these dirs for changes:\n
Localize
Localize_Create
MapLanguageStringToEnum
Mex$
Missing variant flags in '%s'\n
Norwegian
PERF WARNING: '%s' is in UTF-16 format, converting to UTF-8 will allow faster loading of it\n
Plural context: %s\n
Polish
Portuguese
RSDS
ReadLocalizationTokenImpl
Romanian
Russian
Simplified_Chinese
Spanish
Swedish
Token '%s' :g usage conflict\n
Token '%s' :n usage conflict\n
Token '%s' :p usage conflict\n
Tokens
Traditional_Chinese
Turkish
Ukrainian
Unable to find localization token '%s'\n
Unexpected end of variant flags in '%s', probably missing correct end sequence\n
Unexpected end of variant string\n
Unknown currency code
Usage: %s <token>\n
V_isempty( m_szSubLanguageFromSettings )
Valve_Test
Valve_TestGendersEnglishOnly_A:g
Valve_TestGendersEnglishOnly_N:n
Valve_TestPluralsEnglishOnly:p
Vietnamese
WARNING: Duplicate string token '%s' found in %s (original in %s)\n
[unknown string]
\resource\valve_
\tV_fpclassifyd
argindex >= 0
bValidForGender == false
bg_BG
brazilian
bulgarian
cs_CZ
czech
da_DK
danish
de_DE
dump_loc_token
dump_localization_files
dutch
eGender >= 0 && eGender < LOC_GENDER_ENUM_COUNT
eLang + 1 < V_ARRAYSIZE(s_LanguageNames)
eLanguage >= 0 && eLanguage < k_Lang_MAX
eReplace == kKeyReplace_ReplaceAny || eReplace == kKeyReplace_ReplaceMatchingLanguage || eReplace == kKeyReplace_ReplaceMatchingLanguageAndFile
el_GR
en_US
english]
es-419
es_419
es_ES
fi_FI
finnish
fr_FR
french
german
greek
hu_HU
hungarian
id_ID
indonesian
instance %d:\n
it_IT
italian
ja_JP
japanese
ko_KR
korean
koreana
latam
localize.dll
m_Instances.IsValidIndex( nInstanceIdx )
m_Lookup.IsValidIndex( unStringIndex )
m_nChangeStarts > 0
m_nIndex >= 0 && m_nIndex < m_pKV3->GetMemberCount()
m_nNumPluralVariants > 0
nGenders <= LOC_GENDER_ENUM_COUNT
nPluralBase >= 0 && nPluralBase <= (int)LocalizedString_t::k_nVariantMax
nPluralVariant >= 0 && nPluralVariant < s_NumPluralVariants[ eLanguage ]
nPrecision <= 6
nStrings >= 1
nSubInstance != LOCALIZE_INVALID_INSTANCE_INDEX
nTokenIndex != LOCALIZE_INVALID_STRING_INDEX
nVariant >= 0 && RAWG_GENDER( nVariant ) <= (int)LocalizedString_t::k_nVariantMax
nVariant >= 0 && nVariant <= (int)LocalizedString_t::k_nVariantMax
nl_NL
no_NO
norwegian
num <= NumElementsInBlock()
numFormatParameters <= V_ARRAYSIZE( formatParams )
pKV3 && ( pKV3->GetBasicType() == KV3_BTYPE_TABLE || pKV3->GetBasicType() == KV3_BTYPE_NULL )
pLocStrSub->IsVariantSubString()
pProps->m_lang.m_eLanguage >= k_Lang_None && pProps->m_lang.m_eLanguage < k_Lang_MAX
pValue[0] != 0
pl_PL
plurals
plurals*genders
polish
portuguese
pt_BR
pt_PT
resource/countries_%language%.txt
resource/valve_
resource/valve_%language%.txt
resource\valve_
ro_RO
romanian
ru_RU
russian
spanish
start >= 0 && start <= Count()
sv_SE
swedish
tchinese
th_TH
thai
tr_TR
turkish
uk_UA
ukrainian
vi_VN
vietnamese
zh_CN
zh_TW
